/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  Token: { // root type
    contract: string; // String!
    id: string; // String!
    symbol: string; // String!
  }
  Watcher: { // root type
    fromAmount: number; // Float!
    id: string; // String!
    isActive: boolean; // Boolean!
    toAmount: number; // Float!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createWatcher: NexusGenRootTypes['Watcher'] | null; // Watcher
    setActiveWatcher: NexusGenRootTypes['Watcher'] | null; // Watcher
  }
  Query: { // field return type
    getAddress: string | null; // String
    getSupportedTokens: Array<NexusGenRootTypes['Token'] | null> | null; // [Token]
    getWatchers: Array<NexusGenRootTypes['Watcher'] | null> | null; // [Watcher]
  }
  Token: { // field return type
    contract: string; // String!
    id: string; // String!
    symbol: string; // String!
  }
  Watcher: { // field return type
    fromAmount: number; // Float!
    fromToken: NexusGenRootTypes['Token']; // Token!
    id: string; // String!
    isActive: boolean; // Boolean!
    toAmount: number; // Float!
    toToken: NexusGenRootTypes['Token']; // Token!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createWatcher: { // args
      fromTokenAmount: number; // Float!
      fromTokenId: string; // ID!
      toTokenAmount: number; // Float!
      toTokenId: string; // ID!
    }
    setActiveWatcher: { // args
      active: boolean; // Boolean!
      id: string; // ID!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "Token" | "Watcher";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}